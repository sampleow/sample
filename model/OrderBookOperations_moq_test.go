// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package model

import (
	"sync"
)

var (
	lockOrderBookOperationsMockGenerateQuote sync.RWMutex
	lockOrderBookOperationsMockPopulate      sync.RWMutex
)

// OrderBookOperationsMock is a mock implementation of OrderBookOperations.
//
//     func TestSomethingThatUsesOrderBookOperations(t *testing.T) {
//
//         // make and configure a mocked OrderBookOperations
//         mockedOrderBookOperations := &OrderBookOperationsMock{
//             GenerateQuoteFunc: func(quantity float64, buyOrSell BuyOrSell) (*Quote, error) {
// 	               panic("TODO: mock out the GenerateQuote method")
//             },
//             PopulateFunc: func() error {
// 	               panic("TODO: mock out the Populate method")
//             },
//         }
//
//         // TODO: use mockedOrderBookOperations in code that requires OrderBookOperations
//         //       and then make assertions.
//
//     }
type OrderBookOperationsMock struct {
	// GenerateQuoteFunc mocks the GenerateQuote method.
	GenerateQuoteFunc func(quantity float64, buyOrSell BuyOrSell) (*Quote, error)

	// PopulateFunc mocks the Populate method.
	PopulateFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// GenerateQuote holds details about calls to the GenerateQuote method.
		GenerateQuote []struct {
			// Quantity is the quantity argument value.
			Quantity float64
			// BuyOrSell is the buyOrSell argument value.
			BuyOrSell BuyOrSell
		}
		// Populate holds details about calls to the Populate method.
		Populate []struct {
		}
	}
}

// GenerateQuote calls GenerateQuoteFunc.
func (mock *OrderBookOperationsMock) GenerateQuote(quantity float64, buyOrSell BuyOrSell) (*Quote, error) {
	if mock.GenerateQuoteFunc == nil {
		panic("moq: OrderBookOperationsMock.GenerateQuoteFunc is nil but OrderBookOperations.GenerateQuote was just called")
	}
	callInfo := struct {
		Quantity  float64
		BuyOrSell BuyOrSell
	}{
		Quantity:  quantity,
		BuyOrSell: buyOrSell,
	}
	lockOrderBookOperationsMockGenerateQuote.Lock()
	mock.calls.GenerateQuote = append(mock.calls.GenerateQuote, callInfo)
	lockOrderBookOperationsMockGenerateQuote.Unlock()
	return mock.GenerateQuoteFunc(quantity, buyOrSell)
}

// GenerateQuoteCalls gets all the calls that were made to GenerateQuote.
// Check the length with:
//     len(mockedOrderBookOperations.GenerateQuoteCalls())
func (mock *OrderBookOperationsMock) GenerateQuoteCalls() []struct {
	Quantity  float64
	BuyOrSell BuyOrSell
} {
	var calls []struct {
		Quantity  float64
		BuyOrSell BuyOrSell
	}
	lockOrderBookOperationsMockGenerateQuote.RLock()
	calls = mock.calls.GenerateQuote
	lockOrderBookOperationsMockGenerateQuote.RUnlock()
	return calls
}

// Populate calls PopulateFunc.
func (mock *OrderBookOperationsMock) Populate() error {
	if mock.PopulateFunc == nil {
		panic("moq: OrderBookOperationsMock.PopulateFunc is nil but OrderBookOperations.Populate was just called")
	}
	callInfo := struct {
	}{}
	lockOrderBookOperationsMockPopulate.Lock()
	mock.calls.Populate = append(mock.calls.Populate, callInfo)
	lockOrderBookOperationsMockPopulate.Unlock()
	return mock.PopulateFunc()
}

// PopulateCalls gets all the calls that were made to Populate.
// Check the length with:
//     len(mockedOrderBookOperations.PopulateCalls())
func (mock *OrderBookOperationsMock) PopulateCalls() []struct {
} {
	var calls []struct {
	}
	lockOrderBookOperationsMockPopulate.RLock()
	calls = mock.calls.Populate
	lockOrderBookOperationsMockPopulate.RUnlock()
	return calls
}
